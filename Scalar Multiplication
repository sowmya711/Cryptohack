from Crypto.Util.number import inverse
import math
def pt_add(p,q,E):
	zero=(0,0)
	if(p==zero):
		return q;
	elif(q==zero):
		return p;
	else:
		(x1,y1)=p
		(x2,y2)=q
	if(x1==x2 and y1==(-y2)):
		return 0;
	else:
		if(p!=q):
			lam=((y2-y1)*inverse(x2 - x1, E['p']))
		if(p==q):
			lam=((3*(x1**2)+E['a'])*inverse(2 * y1, E['p']))
		x3=(lam**2-x1-x2)%E['p']
		y3=(lam*(x1-x3)-y1)	%E['p']
		Q=(x3,y3)
		
		return Q
def scalar_mul(P,E):
	Q=P
	N=7863 
	R=(0,0)
	while(N>0):
		if(N%2==1):
			R=pt_add(R,Q,E)
		Q=pt_add(Q,Q,E)	
		N=(N//2)
			
	return R
P=(2339,2213)
E={'a':497,'b':1768,'p':9739}
R=scalar_mul(P,E)
print(R)
